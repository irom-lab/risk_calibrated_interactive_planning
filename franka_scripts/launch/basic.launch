<?xml version="1.0" ?>
<launch>
	<arg name="robot_ip" default="172.16.0.2"/>
	<arg name="load_gripper" default="True" />
  	<arg name="joint_state_rate" default="1000" />
  	<arg name="cutoff_frequency" default="1000" />

	<!-- Franka control -->
	<include file="$(find franka_control)/launch/franka_control.launch" >
		<arg name="robot_ip" value="$(arg robot_ip)" />
		<arg name="load_gripper" value="$(arg load_gripper)" />
  		<arg name="joint_state_rate" default="$(arg joint_state_rate)" />
  		<arg name="cutoff_frequency" default="$(arg cutoff_frequency)" />
	</include>

	<!-- Set some project specific defaults for the panda arm. -->
	<node name="set_robot_defaults" pkg="franka_irom_controllers" type="set_panda_defaults.py" respawn="false" output="screen"/>

	<!-- Moveit for pose control-->
	<include file="$(find panda_moveit_config)/launch/panda_moveit.launch">
		<arg name="load_gripper" value="$(arg load_gripper)" />
	</include>
	<node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="position_joint_trajectory_controller"/>

	<!-- Velocity controller for continuous task -->
	<include file="$(find franka_irom_controllers)/launch/joint_velocity_node_controller.launch">
		<arg name="stopped" value="true" />
	</include>
	<!-- <include file="$(find franka_irom_controllers)/launch/cartesian_velocity_node_controller.launch">
		<arg name="stopped" value="true" />
	</include> -->

  <!-- <node pkg="tf" type="static_transform_publisher" name="base_to_depth" args="0.55486009 0.02402774 0.78919258 0.7051549 0.6827899 0.1417814 0.1282677 panda_link0 depth_camera_link 100"/> -->
  <!-- for pushing experiments-->

	<node pkg="tf" type="static_transform_publisher" name="base_to_depth" args="0.79631554 0.054 0.809 -0.7197 -0.6942 0.0117 0.0012 panda_link0 depth_camera_link 100"/>
	<!-- for scooping experiments-->
	<!-- calibration is done in rgb_camera_link with position (X,Y,Z) and quaternion (X,Y,Z,W) 0.78478 0.04039 0.80117 -0.689 -0.724 0.0006 0.0114. We need to then transform to the depth_camera_link by applying the fixed transformation obtained with rosrun tf tf_echo rgb_camera_link depth_camera_link:
		- Translation: [-0.032, -0.002, 0.004]
		- Rotation: in Quaternion [-0.051, 0.000, 0.004, 0.999]
					in RPY (radian) [-0.103, 0.001, 0.007]
					in RPY (degree) [-5.900, 0.046, 0.419]
		the result is -->

</launch>


